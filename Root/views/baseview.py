from django.apps import apps
from django.db import transaction

from rest_framework import viewsets, serializers
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.response import Response
from rest_framework.exceptions import PermissionDenied

from Root.models import *
from ..serializers.baseserializers import *

class BaseModelViewSet(viewsets.ModelViewSet):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def get_permissions(self):
        if self.action in ['update', 'partial_update']:
            if not self.request.user.has_perm(f"{self.queryset.model._meta.app_label}.change_{self.queryset.model._meta.model_name}"):
                raise PermissionDenied
        elif self.action == 'destroy':
            if not self.request.user.has_perm(f"{self.model._meta.app_label}.delete_{self.model._meta.model_name}"):
                raise PermissionDenied
        elif self.action in ['list', 'retrieve']:
            if not self.request.user.has_perm(f"{self.model._meta.app_label}.view_{self.model._meta.model_name}"):
                raise PermissionDenied
        elif self.action == 'create':
            if not self.request.user.has_perm(f"{self.model._meta.app_label}.add_{self.model._meta.model_name}"):
                raise PermissionDenied
        return super().get_permissions()

    def get_queryset(self):
        return super().get_queryset()

    def perform_create(self, serializer):
        serializer.save()

    def perform_update(self, serializer):
        serializer.save()

    def perform_destroy(self, instance):
        instance.delete()

class AutoGeneratedViewSet(viewsets.ModelViewSet):
    lookup_field = 'id'
    lookup_value_regex = '[0-9a-f]{24}'

    @transaction.atomic
    def perform_create(self, serializer):
        serializer.save()

    @transaction.atomic
    def perform_update(self, serializer):
        serializer.save()

    @transaction.atomic
    def perform_destroy(self, instance):
        instance.delete()

    def create(self, request, *args, **kwargs):
        user = request.user
        if not user or not user.is_authenticated:
            return Response({"detail": "Authentication credentials were not provided."}, status=401)
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        try:
            instance = serializer.save()
            data = self.get_serializer(instance).data
            return Response(data, status=201)
        except Exception as e:
            if 'instance' in locals():
                instance.delete()
            raise e

# Dynamically generate views and serializers for each model
models = apps.get_models()
for model in models:
    model_name = model.__name__.lower()

    # Dynamically create serializer class
    serializer_meta = type('Meta', (), {'model': model, 'fields': '__all__'})
    serializer_class = type(f'{model_name}Serializer', (serializers.ModelSerializer,), {'Meta': serializer_meta})

    # Dynamically create ViewSet class
    viewset_class = type(f'{model_name}ViewSet', (AutoGeneratedViewSet,), {
        'serializer_class': serializer_class,
        'queryset': model.objects.all(),
        'model': model
    })

    # Add the dynamically created classes to globals
    globals()[f'{model_name}Serializer'] = serializer_class
    globals()[f'{model_name}ViewSet'] = viewset_class

