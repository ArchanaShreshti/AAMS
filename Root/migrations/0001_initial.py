# Generated by Django 5.1.8 on 2025-05-05 07:28

import Root.models
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_mongodb_backend.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('description', models.TextField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AlertLimits',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.IntegerField()),
                ('normal', models.FloatField()),
                ('satisfactory', models.FloatField()),
                ('alert', models.FloatField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Alert Limits',
                'verbose_name_plural': 'Alert Limits',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bearing',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('bearingNumber', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('innerRacePass', models.FloatField()),
                ('outerRacePass', models.FloatField()),
                ('rollElementPass', models.FloatField()),
                ('cageRotation', models.FloatField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='BearingLocation',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('bearingLocationType', models.CharField(max_length=255)),
                ('velocity', models.JSONField()),
                ('acceleration', models.JSONField()),
                ('accelerationEnvelope', models.JSONField()),
                ('orientation', models.JSONField()),
                ('dataFetchingInterval', models.IntegerField()),
                ('rawDataSavingInterval', models.DateTimeField(blank=True, null=True)),
                ('dataStoreFlag', models.BooleanField(default=False)),
                ('averagingFlag', models.IntegerField(default=0)),
                ('fSpanMin', models.IntegerField(default=8)),
                ('fSpanMax', models.IntegerField(default=800)),
                ('lowFrequencyFmax', models.FloatField(blank=True, null=True)),
                ('lowFrequencyNoOflines', models.IntegerField(blank=True, null=True)),
                ('mediumFrequencyFmax', models.FloatField(blank=True, null=True)),
                ('mediumFrequencyNoOflines', models.IntegerField(blank=True, null=True)),
                ('highFrequencyFmax', models.FloatField(blank=True, null=True)),
                ('highFrequencyNoOflines', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('logo', models.URLField(blank=True, max_length=500, null=True)),
                ('siteImage', models.URLField(blank=True, max_length=500, null=True)),
                ('latitude', models.CharField(max_length=100)),
                ('longitude', models.CharField(max_length=100)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Foundation',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('key', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Foundation',
                'verbose_name_plural': 'Foundations',
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('tagNumber', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.URLField(blank=True, null=True)),
                ('powerRating', models.CharField(blank=True, max_length=255, null=True)),
                ('observations', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('machineType', models.CharField(blank=True, max_length=255, null=True)),
                ('location', models.JSONField(validators=[Root.models.validateLocation])),
                ('rpm', models.IntegerField()),
                ('preventiveCheckList', models.JSONField(blank=True, null=True)),
                ('preventiveCheckData', models.JSONField(blank=True, null=True)),
                ('messageSendTime', models.DateTimeField(blank=True, null=True)),
                ('contactNumber', models.JSONField(blank=True, null=True)),
                ('qrCode', models.URLField(blank=True, null=True)),
                ('dataUpdatedTime', models.DateTimeField(auto_now=True)),
                ('email', models.JSONField(default=Root.models.default_email)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Machine',
                'verbose_name_plural': 'Machines',
            },
        ),
        migrations.CreateModel(
            name='Orientation',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('key', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Orientation',
                'verbose_name_plural': 'Orientations',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('key', models.CharField(max_length=255, unique=True)),
                ('color', models.CharField(blank=True, max_length=255)),
                ('badgeClass', models.CharField(blank=True, max_length=255)),
                ('severity', models.IntegerField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('key', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TechnologyParameter',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('key', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False, unique=True)),
                ('action', models.CharField(choices=[('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete')], max_length=10)),
                ('modelName', models.CharField(blank=True, max_length=255, null=True)),
                ('objectId', models.CharField(blank=True, max_length=255, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('changes', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='auth.group')),
                ('GroupId', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('Groupname', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'swappable': 'AUTH_GROUP_MODEL',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('permission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='auth.permission')),
                ('PermissionId', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('Permissionname', models.CharField(max_length=255)),
                ('codeName', models.CharField(max_length=255)),
            ],
            options={
                'swappable': 'AUTH_PERMISSION_MODEL',
            },
            bases=('auth.permission',),
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', django_mongodb_backend.fields.ObjectIdAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('type', models.CharField(max_length=255)),
                ('theme', models.CharField(max_length=255, null=True)),
                ('phone', models.CharField(max_length=255, null=True)),
                ('notification', models.JSONField(null=True)),
                ('token', models.CharField(max_length=1024, null=True)),
                ('isSuperAdmin', models.BooleanField(default=False)),
                ('licenseKey', models.CharField(max_length=255, null=True)),
                ('licenseAdded', models.BooleanField(default=False)),
                ('applicationLicenseKey', models.CharField(max_length=255, null=True)),
                ('applicationLicenseAdded', models.BooleanField(default=False)),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Manager', 'Manager'), ('Employee', 'Employee'), ('customer', 'Customer'), ('customerAdmin', 'CustomerAdmin'), ('Analyst', 'Analyst')], max_length=20)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
