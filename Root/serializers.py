from rest_framework import serializers
from rest_framework import viewsets
from bson import ObjectId, errors
from Root.models import *
from Vibration.models import Sensor
from django.db import models
from rest_framework.exceptions import ValidationError

class ObjectIdField(serializers.Field):
    def to_representation(self, value):
        return str(value)

    def to_internal_value(self, data):
        # If data is already ObjectId, return it
        if isinstance(data, ObjectId):
            return data
        # Try converting string to ObjectId
        try:
            return ObjectId(data)
        except (ValueError, TypeError):
            raise ValidationError("Invalid ObjectId format.")

class AutoGeneratedSerializer(serializers.ModelSerializer):
    id = ObjectIdField(read_only=True)

    class Meta:
        model = None  # Will be dynamically set in the view or when used
        fields = '__all__'

    def to_representation(self, instance):
        # Get the representation using the default ModelSerializer logic
        representation = super().to_representation(instance)

        # Automatically convert any ObjectId fields in the representation to string
        for key, value in representation.items():
            if isinstance(value, ObjectId):
                representation[key] = str(value)
        
        return representation

    def to_internal_value(self, data):
        # Convert foreign key fields to ObjectId
        for field in self.Meta.model._meta.get_fields():
            if isinstance(field, models.ForeignKey):
                field_name = field.name
                if field_name in data:
                    data[field_name] = ObjectId(data[field_name])

        # Call the original method to handle other conversions
        return super().to_internal_value(data)
    
class LoginSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField(max_length=128, write_only=True)

class SensorSerializer(serializers.ModelSerializer):
    bearingLocationId = ObjectIdField()
    machineId = ObjectIdField()
    customerId = ObjectIdField()
    statusId = ObjectIdField()

    class Meta:
        model = Sensor
        fields = '__all__'

class BearingLocationSerializer(serializers.ModelSerializer):
    id = serializers.SerializerMethodField()

    class Meta:
        model = BearingLocation
        fields = '__all__'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def get_id(self, obj):
        return str(obj.id)

    def to_representation(self, instance):
        representation = super().to_representation(instance)        
        representation['id'] = str(representation['id'])
        
        foreign_key_fields = [
            'machineId', 'bearingId', 'statusId', 'accelerationEnvelope_id',
            'velocity_id', 'acceleration_id', 'orientation_id', 'technologyParamId'
        ]

        for field in foreign_key_fields:
            if hasattr(instance, field) and getattr(instance, field):
                representation[field] = str(getattr(instance, field).id)

        # Convert ObjectId instances in nested dictionaries
        for key, value in representation.items():
            if isinstance(value, dict) and '_id' in value and '$oid' in value['_id']:
                representation[key]['_id'] = value['_id']['$oid']

        return representation

class MachineSerializer(serializers.ModelSerializer):
    id = serializers.SerializerMethodField()

    class Meta:
        model = Machine
        fields = '__all__'

    def get_id(self, obj):
        return str(obj.id)

    def to_representation(self, instance):
        representation = super().to_representation(instance)

        # Convert ObjectId foreign keys to string manually
        representation['customerId'] = str(instance.customerId.id) if instance.customerId else None
        representation['technologyId'] = str(instance.technologyId.id) if instance.technologyId else None
        representation['statusId'] = str(instance.statusId.id) if instance.statusId else None
        representation['areaId'] = str(instance.areaId.id) if instance.areaId else None
        representation['subAreaId'] = str(instance.subAreaId.id) if instance.subAreaId else None

        return representation

class UserSerializer(AutoGeneratedSerializer):
    customerId = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = '__all__'

    def get_customerId(self, obj):
        """
        Returns the string representation of the customerId object's id attribute.
        """
        if obj.customerId:
            return str(obj.customerId.id)
        return None

class AlertLimitsSerializer(serializers.ModelSerializer):
    id = serializers.SerializerMethodField()
    class Meta:
        model = AlertLimits
        fields = [
            'id', 'name', 'description', 'type', 
            'normal', 'satisfactory', 'alert', 
            'createdAt', 'updatedAt'
        ]

    def get_id(self, obj):
        # Ensure the ObjectId is converted to a string
        return str(obj.id)  # Convert the ObjectId to a string