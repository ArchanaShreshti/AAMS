from rest_framework import serializers
from bson import ObjectId
from Root.models import *
from Vibration.models import Sensor
from django.db import models
from rest_framework.exceptions import ValidationError

class ObjectIdField(serializers.Field):
    def to_representation(self, value):
        return str(value)

    def to_internal_value(self, data):
        # If data is already ObjectId, return it
        if isinstance(data, ObjectId):
            return data
        # Try converting string to ObjectId
        try:
            return ObjectId(data)
        except (ValueError, TypeError):
            raise ValidationError("Invalid ObjectId format.")

class AutoGeneratedSerializer(serializers.ModelSerializer):
    id = ObjectIdField(read_only=True)

    class Meta:
        model = None  # Will be dynamically set in the view or when used
        fields = '__all__'

    def to_representation(self, instance):
        # Get the representation using the default ModelSerializer logic
        representation = super().to_representation(instance)

        # Automatically convert any ObjectId fields in the representation to string
        for key, value in representation.items():
            if isinstance(value, ObjectId):
                representation[key] = str(value)
        
        return representation

    def to_internal_value(self, data):
        # Convert foreign key fields to ObjectId
        for field in self.Meta.model._meta.get_fields():
            if isinstance(field, models.ForeignKey):
                field_name = field.name
                if field_name in data:
                    data[field_name] = ObjectId(data[field_name])

        # Call the original method to handle other conversions
        return super().to_internal_value(data)