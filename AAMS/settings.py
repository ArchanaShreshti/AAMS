"""
Django settings for AAMS project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import django_mongodb_backend
from datetime import timedelta
from pathlib import Path
from corsheaders.defaults import default_headers
import os
from dotenv import load_dotenv
import pytz

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-yf&#$kt-uli=(k2iv6k=e$qru3r2y#q5a2hzq@$6mj(wmk+wb$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'AAMS.apps.MongoAdminCustomConfig',  
    'AAMS.apps.MongoContentTypesConfig',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.auth', 
    'simple_history',
    'drf_spectacular',
    'Root',
    'Feedback',
    'OilAnalysis',
    'PreventiveCheck',
    'Report',
    'Safety',
    'Spare',
    'Schedules',
    'Vibration',
    'screen_views',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',                      #To connect frontend, configure CORS headers to allow cross-origin requests.
    'OldDataImport',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'Root.middleware.TrackLoggedInUserMiddleware',
]

ROOT_URLCONF = 'AAMS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AAMS.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": django_mongodb_backend.parse_uri("mongodb://localhost:27017/AAMS"),
}

MONGODB_URI = "mongodb://localhost:27017/"
MONGODB_NAME = "AAMS"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django_mongodb_backend.fields.ObjectIdAutoField'

MIGRATION_MODULES = {
    'admin': 'mongo_migrations.admin',
    'auth': 'mongo_migrations.auth',
    'contenttypes': 'mongo_migrations.contenttypes',
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # tool for generating API documentation is the drf-spectacular library, which generates OpenAPI documentation for our API.
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,  # Default page size
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'AAMS',
    'DESCRIPTION': 'AAMS API LIST',
    'VERSION': '1.0.0',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=6),  
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'Media')
MEDIA_URL = '/Media/'

AUTH_USER_MODEL = 'Root.User'
AUTH_GROUP_MODEL = 'Root.Group'
AUTH_PERMISSION_MODEL = 'Root.Permission'

AUTHENTICATION_BACKENDS = [
    'Root.backend.EmailBackend',  # Add custom backend here
    'django.contrib.auth.backends.ModelBackend', # Default backend as a fallback  
]

ADMIN_LOG_ENABLED = True

#To track changes for every model, need to add history = HistoricalRecords() to each model.
MODEL_BASE_CLASS = 'path.to.HistoricalModel'  

#Automatically creates schema 
AUTO_SCHEMA_APPS = ['Root', 'Feedback', 'OilAnalysis', 'PreventiveCheck', 'Report', 'Safety', 'Schedules', 'Spare', 'Thermography','Vibration']

# To allow CORS requests:
""" CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://app.aams.io",
    "http://127.0.0.1:3000",
    "http://13.215.216.171:4444",
] """

CORS_ALLOW_ALL_ORIGINS = True

# CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    "authorization",
]

CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://13.215.216.171:4444",
]

# Load environment variables
load_dotenv()

# Audio directory
AUDIO_DIRECTORY = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '../audio')
os.makedirs(AUDIO_DIRECTORY, exist_ok=True)

# Timezone

GMT_TIMEZONE = pytz.timezone('Asia/Kolkata')

# Environment
ENVIRONMENT = os.getenv('ENVIRONMENT')

# MongoDB connection details
if ENVIRONMENT == "production":
    DB_HOST = os.getenv("DB_HOST")
    DB_AUTH = os.getenv("DB_AUTH")
    DB_PASSWORD = os.getenv("DB_PASSWORD")
    APP_DB = os.getenv("APP_DB")
    MONGO_URI = f"mongodb+srv://{DB_AUTH}:{DB_PASSWORD}@{DB_HOST}/{APP_DB}"
elif ENVIRONMENT == "development":
    DB_HOST = os.getenv("MONGODB_HOST")
    DB_AUTH = os.getenv("MONGODB_AUTH")
    DB_PASSWORD = os.getenv("MONGODB_PASSWORD")
    APP_DB = os.getenv("MONGOAPP_DB")
    MONGO_URI = f"mongodb+srv://{DB_AUTH}:{DB_PASSWORD}@{DB_HOST}/{APP_DB}"

NEW_PARQUET_PATH = os.getenv("NEW_PARQUET_PATH")
PARQUET_PATH = os.getenv("PARQUET_PATH")

# To acheive compression
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
COMPRESS_ENABLED = True
COMPRESS_CSS_HASHING_METHOD = 'content'
COMPRESS_FILTERS = {
    'css':[
        'compressor.filters.css_default.CssAbsoluteFilter',
        'compressor.filters.cssmin.rCSSMinFilter',
    ],
    'js': [
        'compressor.filters.jsmin.JSMinFilter',
    ],
}
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

# To access Parquet
PARQUET_PATH = 'path_to_parquet_files/'
NEW_PQ_DIR = 'path_to_new_parquet_files/'

# LOGGING = {
# 'version': 1,
# 'disable_existing_loggers': False,
# 'handlers': {
# 'console': {
# 'class': 'logging.StreamHandler',
# },
# },
# 'loggers': {
# '': {
# 'handlers': ['console'],
# 'level': 'DEBUG',
# },
# },
# }

# For Oil Anlaysis Report Generation

AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")  # <-- Changed here
AWS_REGION = os.getenv("AWS_REGION")

